from model_loader import load_model
from transformers import CLIPTokenizer
from PIL import Image
import torch
import os

class ImageGenerator:
    def __init__(self, model_path=None, device='cuda'):
        if not model_path:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏.")
        self.model_path = model_path
        self.model = load_model(model_path)

        # üí° –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ tokenizer –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª—Å—è
        if not hasattr(self.model, "tokenizer") or self.model.tokenizer is None:
            try:
                tokenizer_path = os.path.join(self.model_path, "tokenizer")
                print(f"üì• –ü–æ–¥–≥—Ä—É–∂–∞–µ–º tokenizer –≤—Ä—É—á–Ω—É—é –∏–∑: {tokenizer_path}")
                self.model.tokenizer = CLIPTokenizer.from_pretrained(tokenizer_path)
                print("‚úÖ Tokenizer –ø–æ–¥–≥—Ä—É–∂–µ–Ω –≤—Ä—É—á–Ω—É—é.")
            except Exception as e:
                raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ tokenizer: {e}")

    def generate_image(self, prompt, style, size, num_inference_steps=50):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞, —Å—Ç–∏–ª—è –∏ —Ä–∞–∑–º–µ—Ä–∞"""
        if not prompt:
            raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –≤ prompt
        if style and style != "–Ω–µ –≤—ã–±—Ä–∞–Ω":
            style_map = {
                "–ø–∏–∫—Å–µ–ª—å-–∞—Ä—Ç": "pixelart style",
                "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π": "realistic",
                "–∞–∫–≤–∞—Ä–µ–ª—å": "watercolour style",
                "–∫–∏–±–µ—Ä–ø–∞–Ω–∫": "cyberpunk style",
                "—Ñ—ç–Ω—Ç–µ–∑–∏": "fantasy style",
                "–º—É–ª—å—Ç—Ñ–∏–ª—å–º": "cartoon style"
            }
            prompt += ", " + style_map.get(style, style)

        # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            width, height = map(int, size.split('x'))
        except Exception:
            width, height = 512, 512  # fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            result = self.model(
                prompt=prompt,
                height=height,
                width=width,
                num_inference_steps=num_inference_steps,
                guidance_scale=7.5  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            )
            return result.images[0]
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    def save_image(self, image, path):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            image.save(path)
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
